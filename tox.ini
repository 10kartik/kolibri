[tox]
envlist = py{2.7,3.4,3.5,3.6,3.7,3.8}, docs, postgres, cext, nocext

[testenv]
usedevelop = True
whitelist_externals=
    rm
    make
    sh
setenv =
    KOLIBRI_HOME = {envtmpdir}/.kolibri
    DJANGO_SETTINGS_MODULE = kolibri.deployment.default.settings.test
    KOLIBRI_RUN_MODE = tox
    SKIP_PY_CHECK = 1
basepython =
    licenses: python2.7
    py2.7: python2.7
    py3.4: python3.4
    py3.5: python3.5
    py3.6: python3.6
    py3.7: python3.7
    py3.8: python3.8
    docs: python3.5
    nocext: python2.7
    cext: python2.7
    timely_shutdown_no_zombies: python3.6
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/cext.txt
commands =
    sh -c 'kolibri manage makemigrations --check'
    # Run the actual tests
    py.test {posargs:--cov=kolibri --cov-report= --cov-append --color=no}
    # Fail if the log is longer than 200 lines (something erroring or very noisy got added)
    sh -c "if [ `cat {env:KOLIBRI_HOME}/logs/kolibri.txt | wc -l` -gt 200 ] ; then echo 'Log too long' && echo '' && tail -n 20 {env:KOLIBRI_HOME}/logs/kolibri.txt && exit 1 ; fi"

# Running w/o C extensions is slow, so we just do a
# limited amount of testing
# This briefly tests our static deps etc w/o cexts
[testenv:nocext]
passenv = TOX_ENV
setenv =
     PYTHONPATH = "{toxinidir}:{toxinidir}/kolibri/dist"
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/build.txt
commands =
    # Ensure that for this Python version, we can actually compile ALL files
    # in the kolibri directory
    python -m compileall -q kolibri -x py2only
    # Until we have staged builds, we will be running this in each and every
    # environment even though builds should be done in Py 2.7
    make staticdeps
    # Start and stop kolibri
    coverage run -p kolibri start --port=8081
    coverage run -p kolibri stop
    # Run just tests in test/
    py.test --cov=kolibri --cov-report= --cov-append --color=no test/

# This briefly tests our static deps etc WITH cexts
[testenv:cext]
passenv = TOX_ENV
setenv =
     PYTHONPATH = "{toxinidir}:{toxinidir}/kolibri/dist"
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/build.txt
commands =
    # Ensure that for this Python version, we can actually compile ALL files
    # in the kolibri directory
    python -m compileall -q kolibri -x py2only
    # Until we have staged builds, we will be running this in each and every
    # environment even though builds should be done in Py 2.7
    make staticdeps
    make staticdeps-cext
    # Start and stop kolibri
    coverage run -p kolibri start --port=8081
    coverage run -p kolibri stop
    # Run just tests in test/
    py.test --cov=kolibri --cov-report= --cov-append --color=no test/

[testenv:timely_shutdown_no_zombies]
passenv = TOX_ENV
whitelist_externals =
    fuser
    sleep
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/base.txt
commands =
    - fuser 8082/tcp -k

    # ensure kolibri stops within 20 seconds 10 times in a row
    {toxinidir}/test/ensure_kolibri_stops_within_time.sh 20 10 8082
    {toxinidir}/test/ensure_no_kolibris_running_on_port.sh 8082


[testenv:postgres]
passenv = TOX_ENV
setenv =
    PYTHONPATH = {toxinidir}
    KOLIBRI_HOME = {envtmpdir}/.kolibri
    DJANGO_SETTINGS_MODULE = kolibri.deployment.default.settings.postgres_test
    KOLIBRI_RUN_MODE = tox
basepython =
    postgres: python3.5
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/cext.txt
    -r{toxinidir}/requirements/postgres.txt
commands =
    py.test {posargs:--cov=kolibri --color=no}
    # rm -rf {env:KOLIBRI_HOME}

[testenv:docs]
deps =
    -r{toxinidir}/requirements/docs.txt
commands =
    make docs

[testenv:licenses]
whitelist_externals =
    {toxinidir}/test/if.sh
commands =
    {toxinidir}/test/if.sh "requirements_changed"
