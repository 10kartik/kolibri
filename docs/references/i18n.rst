
.. _i18n:

Internationalization
====================

As a platform intended for use around the world, Kolibri has a strong mandate for translation and internationalization. As such, it has been designed with technologies to enable this built in.


Writing localized strings
-------------------------

For strings in python files, we are using standard Django tools (``gettext`` and associated functions). See the `Django i18n documentation <https://docs.djangoproject.com/en/1.10/topics/i18n/>`__ for more information.

For strings in the frontend, we are using `Vue-Intl <https://www.npmjs.com/package/vue-intl>`__, an in house port of `React-intl <https://www.npmjs.com/package/react-intl>`__. Strings are collected during the build process, and bundled into exported JSON files.

Messages will be discovered for any registered plugins and loaded into the page if that language is set as the Django language. All language setting for the frontend are based off the current Django language for the HTTP request.


.vue files
~~~~~~~~~~

Within Kolibri .vue components, messages are defined in the ``<script>`` section as attributes of the component definition:

.. code-block:: javascript

  export default {
    name: 'componentName',
    $trs: {
      msgId1: 'Message text 1',
      msgId2: 'Message text 2',
    },
  };


The component names and message IDs should all be camelCase.

User visible strings can be used anywhere in the .vue file using ``$tr('msgId')`` (in the template) or ``this.$tr('msgId')`` (in the script).


An example Vue component would then look like this

.. code-block:: html

  <template>
    <div>
      <!-- puts 'Hello world' in paragraph -->
      <p>{{ $tr('helloWorld') }}</p>
    </div>
  </template>


  <script>

    export default {
      name: 'someComponent',
      mounted() {
        // prints 'Hello world' to console
        console.log((this.$trs('helloWorld'));
      },
      $trs: {
        helloWorld: 'Hello world',
      },
    };

  </script>


.js files
~~~~~~~~~

In order to translate strings in Javascript source files, the namespace and messages are defined like this:

.. code-block:: javascript

  import { createTranslator } from 'kolibri.utils.i18n';
  const name = 'someModule';
  const messages = {
    helloWorld: 'Hello world',
  };
  const translator = createTranslator(name, messages);

Then messages are available from the ``$tr`` method on the translator object:

.. code-block:: javascript

  console.log(translator.$tr('helloWorld'));

ICU message syntax
~~~~~~~~~~~~~~~~~~

All frontend translations can be parameterized using `ICU message syntax <https://formatjs.io/guides/message-syntax/>`__. Additional documentation is `available on crowdin <https://support.crowdin.com/icu-message-syntax/>`__.

This syntax can be used to do things like inject variables, pluralize words, and localize numbers.

Dynamic values are passed into translation strings as named arguments in an object. For example:

.. code-block:: javascript

  export default {
    name: 'anothetComponent',
    mounted() {
      // outputs 'Henry read 2 stories'
      console.log(this.$tr('msg', {name: 'Henry', count: 2}));
    },
    $trs: {
      msg: '{name} read {count} {count, plural, one {story} other {stories}}',
    },
  };



.. _crowdin:

Crowdin workflow
----------------

We use the Crowdin platform to enable third parties to translate the strings in our application.

Note that you have to specify branch names for most commands.

.. note:: These notes are only for the Kolibri application. For translation of user documentation, please see the `kolibri-docs repository <https://github.com/learningequality/kolibri-docs/>`__.


Prerequisites
~~~~~~~~~~~~~

First, you'll need to have GNU ``gettext`` available on your path. You may be able to install it using your system's package manager.

.. note:: If you install ``gettext`` on Mac with Homebrew, you may need to add the binary to your path manually

Next, ensure you have an environment variable ``CROWDIN_API_KEY`` set to the Learning Equality organization `account API key <https://support.crowdin.com/api/api-integration-setup/>`__.


Updating the Perseus plugin
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `perseus exercise plugin <https://github.com/learningequality/kolibri-exercise-perseus-plugin>`__ has its own translated files that also need to be updated.

To do this, you'll need to install the Perseus Plugin in development mode (using ``pip install -e``). This will allow the scripts to properly upload sources and download translations from and to the Perseus plugin, which may then need to be released.

See the `Perseus plugin development guide <https://github.com/learningequality/kolibri-exercise-perseus-plugin#development-guide>`__ for more information on setup and publication.


Exporting and uploading
~~~~~~~~~~~~~~~~~~~~~~~

Typically, strings will be uploaded when a new release branch is cut from ``develop``, signifying the beginning of string freeze and the ``beta`` releases.

Before translators can begin working on the strings in our application, they need to be uploaded to Crowdin. Translations are maintained in release branches on Crowdin in the `Crowdin kolibri project <http://crowdin.com/project/kolibri>`__.

This command will extract front- and backend strings and upload them to Crowdin:

.. code-block:: bash

  $ make i18n-crowdin-upload branch=[release-branch-name]

The branch name will typically look something like: ``release-v0.8.x``

After uploading, this will also apply 'pre-translation' (which can take some time). This copies over translations for strings that have the same text but different IDs.


Displaying stats
~~~~~~~~~~~~~~~~

Every release, we need to let translators for each language know how much work they will have to do. In order to see how many new strings and words are in a particular release, run:

.. code-block:: bash

  $ make i18n-stats branch=[release-branch-name]

This will give you some output like this:

.. code-block:: text

    Branch: develop-alpha

    New since last release:
    -------------  ---
    Total strings   67
    Total words    402
    -------------  ---

    Untranslated:
    Language                        Strings    Words
    ----------------------------  ---------  -------
    ** average, all languages **         49      370
    Arabic                               48      366
    Bengali                              47      370
    ...
    Yoruba                               50      375
    Zulu                                 49      367


This information can be provided to translators; it's also available on the Crowdin website.


Fetching and building translations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to get the newly translated strings into the application, they need to be downloaded from Crowdin and checked in to the Kolibri github repo.

You can download them using this command:

.. code-block:: bash

    $ make i18n-crowdin-download branch=[release-branch-name]

This will update local translation files. Check in new strings to git and submit them in a PR to the release branch.

.. warning:: Before downloading, this will build the project (which can take some time). Builds can only happen once every 30 minutes, as per the Crowdin API.



.. _new_language:

Adding a newly supported language
---------------------------------

In order to add a new supported language to Kolibri, the appropriate language information object must be added to the array in ``kolibri/locale/supported_languages.json``.

The language must be described using the following keys, with everything in lower case

.. code-block:: javascript

  {
    "crowdin_code": "<Code used to refer to the language on Crowdin>",
    "intl_code": "<Lowercase code from Intl.js>",
    "language_name": "<Language name in the target language>",
    "english_name": "<Optional: Language name in English>",
    "default_font": "Name of the primary Noto font"
  }


Code references:

* `Crowdin language codes <https://support.crowdin.com/api/language-codes/>`__
* `Supported Intl language codes <https://github.com/andyearnshaw/Intl.js/tree/master/locale-data/jsonp>`__

For the language names, consult:

1. Primarily, `ISO 639 codes <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`__
2. `Backup reference <http://helpsharepointvision.nevron.com/Culture_Table.html>`__

For the font name, check the `Noto database <https://www.google.com/get/noto/>`__.

Any time a language is added to supported languages the command ``yarn run generate-locale-data`` must be run, and the resulting file changes committed to the code base.

In some cases, the language doesn't exist in Django. In these situations, the language needs to be added to ``EXTRA_LANG_INFO`` in ``base.py``.


Adding a new font
~~~~~~~~~~~~~~~~~

We use variants of Noto Sans in Regular and Bold throughout the application in different languages. Search the `Noto database <https://www.google.com/get/noto/>`__ to see which font supports the language you're interested in. You can update an existing font or add a new one by running:

To do this, run:

.. code-block:: bash

    $ make i18n-install-font name=[FontName]

Where ``[FontName]`` might for example be for exmaple ``NotoSansBengali``. Note that this will also automatically look for the ``[FontName]UI`` variant, e.g. ``NotoSansBengaliUI``.

.. note:: We attempt to download Phase III hinted TTF fonts from the `Google Noto Fonts <https://github.com/googlei18n/noto-fonts/>`__ github repo. It is possible that the structure of this repo will change over time, and the installer script will need to be updated.


.. _rebuild_fonts:

Rebuilding fonts
----------------

Whenever translations are updated or new fonts are added, we also need to re-generate our custom fonts and CSS. These custom fonts are built to include a minimal subset of glyphs that can be quickly loaded to display application text in particular languages, and then lazily load the full font files.

To re-generate the font files and CSS, run:

.. code-block:: bash

    $ make i18n-generate-fonts

Then, check the newly-created and -updated files into git.








